from collections import deque
import heapq
import random
import copy
import itertools




'''
Uninformed: 1.BFS, 2.DFS, 3.UCS, 1.IDS

Informed: 2.Greedy, 3.A*

Local & Optimization: 1.Hill-Climbing, 2.Simulated Annealing, 3.Beam Search, GA

CSP: 1.Backtracking+Forward Checking, AC-3

Adversarial: 1.Minimax, 2.Alpha-Beta, 3.Expectiminimax (d·ªëi kh√°ng)

Planning: 2.And-Or search, 3.Belief search




'''

class algorithm:
    def __init__(self, ui):
        self.ui=ui


    # ---------- DFS ----------
    def dfs_solver(self, grid, colors, idx):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        if idx == len(colors):
            return True, grid
        color = colors[idx]
        start, end = self.ui.pairs[color]
        self.ui.log(f"‚û°Ô∏è ƒêang x·ª≠ l√Ω m√†u {color.upper()} t·ª´ {start} ƒë·∫øn {end}")

        def backtrack(path, visited):
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return False, None


            r, c = path[-1]
            if (r, c) == end:
                new_grid = [row[:] for row in grid]
                for (pr, pc) in path:
                    new_grid[pr][pc] = color
                self.ui.log(f"‚úÖ T√¨m th·∫•y ƒë∆∞·ªùng cho m√†u {color}")
                ok, res = self.dfs_solver(new_grid, colors, idx+1)
                if ok:
                    # V·∫Ω ƒë∆∞·ªùng ho√†n ch·ªânh cho m√†u n√†y
                    self.ui.paint_path(path, colors[idx])
                    return True, res

                return False, None

            for dr, dc in [(0,1),(0,-1),(1,0),(-1,0)]:
                nr, nc = r+dr, c+dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if (nr, nc) not in visited and (grid[nr][nc] == '' or (nr, nc) == end):
                        visited.add((nr, nc))
                        path.append((nr, nc))
                        ok, res = backtrack(path, visited)
                        if ok: return True, res
                        path.pop()
                        visited.remove((nr, nc))

            return False, None

        return backtrack([start], {start})

    # ---------- BFS ----------
    # Kh√°c bi·ªát: C√≥ s·ª≠ d·ª•ng backtracking ƒë·ªÉ th·ª≠ b·∫Øt ƒë·∫ßu t·ª´ 1 root (m√†u) m·ªõi ƒë·ªÉ m·ªü r·ªông h∆°n
    def bfs_solver(self, grid, colors):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        if not colors:
            return True, grid

        for i, color in enumerate(colors):
            start, end = self.ui.pairs[color]
            self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng BFS...")
            path = self.bfs_find_path(grid, start, end, color)
            if not path:
                self.ui.log(f"‚ö†Ô∏è Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                return False, None
            if path:
                new_grid = [row[:] for row in grid]
                for (r, c) in path:
                    new_grid[r][c] = color

                # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
                self.ui.paint_path(path, color)

                remaining = colors[:i] + colors[i+1:]
                ok, solution = self.bfs_solver(new_grid, remaining)
            if ok:
                return True, solution
        return False, None

    def bfs_find_path(self, grid, start, end, color):
        q = deque([start])
        parents = {start: None}
        while q:
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return False, None

            r, c = q.popleft()
            # highlight node ƒëang x√©t
            if (r, c) not in [start, end]:
                self.ui.paint_cell(r, c, "lightblue")
                self.ui.log(f"üîπ M·ªü r·ªông {color} t·∫°i ({r},{c})")


            if (r, c) == end:
                # reconstruct path
                path = []
                cur = end
                while cur is not None:
                    path.append(cur)
                    cur = parents[cur]
                path.reverse()
                return path

            # duy·ªát 4 h∆∞·ªõng
            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if (nr, nc) not in parents:
                        cell = grid[nr][nc]

                        # ch·ªâ ƒë∆∞·ª£c ƒëi n·∫øu:
                        # - √¥ tr·ªëng, ho·∫∑c
                        # - √¥ c√πng m√†u, ho·∫∑c
                        # - √¥ end (v√† √¥ end ƒëang tr·ªëng ho·∫∑c c√≥ ƒë√∫ng m√†u)
                        if (
                            cell == "" 
                            or cell == color 
                            or ((nr, nc) == end and (grid[nr][nc] in ["", color]))
                        ):
                            parents[(nr, nc)] = (r, c)
                            q.append((nr, nc))
        return None
    

    
    
    #----------GREEDY----------
    def heuristic_greedy(self, grid, color, alpha):
        (sx, sy), (ex, ey) = self.ui.pairs[color]
        # yeu to 1_manhattan: |x1-x2| + |y1-y2|
        h1 = abs(sx - ex) + abs(sy - ey)

        # yeu to 2: tinh cac diem mau khac lien ke mau dang xet
        h2 = 0
        for (r, c) in [(sx, sy), (ex, ey)]:
            for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    cell = grid[nr][nc]
                    if cell != "" and cell != color:
                        h2 += 1

        return h1 + alpha * h2

    
    def greedy_solver(self, grid, colors, alpha):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        if not colors:
            return True, grid
        
        hq = []

        for color in colors:
            cost = self.heuristic_greedy(grid, color, alpha)
            heapq.heappush(hq, (cost, color))

        new_grid = [row[:] for row in grid]
        solved_colors = []

        while hq:
            cost, color = heapq.heappop(hq)
            start, end = self.ui.pairs[color]
            self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} (h={cost})")

            path = self.bfs_find_path(new_grid, start, end, color)
            if not path:
                self.ui.log(f"‚ö†Ô∏èKh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                continue

            # t√¥ m√†u v√† c·∫≠p nh·∫≠t grid
            for (r, c) in path:
                new_grid[r][c] = color
            self.ui.paint_path(path, color)
            solved_colors.append(color)

        return True, new_grid
    
    #----------Hill-Climbing------------
    '''√ù t∆∞·ªüng: ch·∫°y thu·∫≠t to√°n bfs nh∆∞ng kh√¥ng backtracking theo th·ª© t·ª± trong colors list ƒë·ªÉ 
    sinh ra tr∆∞·ªùng h·ª£p x·∫•u sau ƒë√≥ d√πng hill_climbing ƒë·ªÉ t√¨m l·ªùi gi·∫£i cu·ªëi c√πng'''
    def heuristic_hc(self, grid):
        #y tuong: so cap mau chua duoc noi
        cnt = 0
        for color, (start, end) in self.ui.pairs.items():
            if self.path_exists(grid, start, end, color) == False:
                cnt += 1
        return cnt
    
    def path_exists(self, grid, start, end, color):
        q = deque([start])
        visited = {start}

        while q:
            r, c = q.popleft()
            if (r, c) == end:
                return True

            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if (nr, nc) not in visited:
                        cell = grid[nr][nc]
                        #  ch·ªâ ƒëi qua √¥ c√πng m√†u ho·∫∑c √¥ end
                        if cell == color or (nr, nc) == end:
                            visited.add((nr, nc))
                            q.append((nr, nc))
        return False
    
    #d√πng th·∫≥ng bfs_find_path s·∫Ω ghi nhi·ªÅu log th·ª´a,  2 h√†m t∆∞∆°ng t·ª± nhau
    '''def path_exists(self, grid, start, end, color): #cong dung: kiem tra xem cap mau da duoc noi chua 
        path = self.bfs_find_path(grid, start, end, color) 
        return bool(path)'''


    
    def generate_neighbor(self, grid, colors):
        new_grid = copy.deepcopy(grid)

        connected = []
        unconnected = []

        for color, (start, end) in self.ui.pairs.items():
            if self.path_exists(grid, start, end, color):
                connected.append(color)
            else:
                unconnected.append(color)

        self.ui.log(f"üß© Connected: {connected}, Unconnected: {unconnected}")

        if not unconnected:
            self.ui.log("üéØ T·∫•t c·∫£ m√†u ƒë√£ n·ªëi xong, kh√¥ng t·∫°o neighbor m·ªõi.")
            return new_grid

        if not connected:
            color_remove = None
            self.ui.log("‚ö†Ô∏è Ch∆∞a c√≥ m√†u n√†o n·ªëi xong ƒë·ªÉ xo√°.")
        else:
            color_remove = random.choice(connected)

        color_try = random.choice(unconnected)
        self.ui.log(f"üîÑ ƒêang th·ª≠ xo√° m√†u: {color_remove}, th·ª≠ n·ªëi l·∫°i m√†u: {color_try}")

        # xo√° m√†u ƒë√£ n·ªëi (gi·ªØ l·∫°i 2 ƒë·∫ßu)
        if color_remove:
            start_rm, end_rm = self.ui.pairs[color_remove]
            for r in range(self.ui.grid_size):
                for c in range(self.ui.grid_size):
                    if new_grid[r][c] == color_remove and (r, c) not in [start_rm, end_rm]:
                        new_grid[r][c] = ""

        # th·ª≠ n·ªëi l·∫°i t·∫•t c·∫£ m√†u ch∆∞a n·ªëi
        self.ui.log("üîÅ ƒêang th·ª≠ n·ªëi l·∫°i to√†n b·ªô m√†u ch∆∞a n·ªëi...")
        for color in unconnected:
            start, end = self.ui.pairs[color]
            path = self.bfs_find_path(new_grid, start, end, color)
            if path:
                self.ui.log(f"‚úÖ N·ªëi l·∫°i th√†nh c√¥ng {color} trong UNCONNECTED")
                for (r, c) in path:
                    new_grid[r][c] = color
            else:
                self.ui.log(f"‚ùå Kh√¥ng n·ªëi ƒë∆∞·ª£c {color}")

        # th·ª≠ n·ªëi l·∫°i m√†u ƒë√£ x√≥a (n·∫øu c√≥)
        if color_remove:
            start_r, end_r = self.ui.pairs[color_remove]
            path_r = self.bfs_find_path(new_grid, start_r, end_r, color_remove)
            if path_r:
                self.ui.log(f"üîÅ N·ªëi l·∫°i {color_remove} th√†nh c√¥ng trong CONNECTED")
                for (r, c) in path_r:
                    new_grid[r][c] = color_remove

        return new_grid

    

    def hc_solver(self, grid, colors, max_steps):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None
        
        current = copy.deepcopy(grid)
        for color in colors:
            start, end = self.ui.pairs[color]
            path = self.bfs_find_path(current, start, end, color)
            if path:
                self.ui.paint_path(path, color)
                for (r, c) in path:
                    current[r][c] = color
        best_score = self.heuristic_hc(current)
        steps = 0

        self.ui.log(f"üöÄ B·∫Øt ƒë·∫ßu Hill-Climbing v·ªõi heuristic ban ƒë·∫ßu = {best_score}")

        

        while steps < max_steps and best_score > 0:
            neighbor = self.generate_neighbor(current, colors)
            score = self.heuristic_hc(neighbor)

            self.ui.log(f"üîÅ Step {steps}: neighbor_heuristic = {score}")

            if score < best_score:
                self.ui.log(f"‚úÖ T√¨m th·∫•y tr·∫°ng th√°i t·ªët h∆°n ({best_score} ‚Üí {score})")
                current = neighbor
                best_score = score
                self.ui.reset_game()
                grid = copy.deepcopy(current)
                for color in colors:
                    start, end = self.ui.pairs[color]
                    path = self.bfs_find_path(grid, start, end, color)
                    if path:
                        self.ui.paint_path(path, color)


            steps += 1

        if best_score == 0:
            self.ui.log("üéâ T·∫•t c·∫£ m√†u ƒë√£ ƒë∆∞·ª£c n·ªëi th√†nh c√¥ng!")
            return True, current
        else:
            self.ui.log(f"‚õî D·ª´ng sau {steps} b∆∞·ªõc, ch∆∞a gi·∫£i ƒë∆∞·ª£c (heuristic={best_score})")
        
        return False, current
    
    #-----------Backtracking + Forward Checking---------------
    '''√Ω t∆∞·ªüng: b·∫Øt ƒë·∫ßu theo th·ª© t·ª± trong colors list n·∫øu FC t√¨m ra 1 m√†u kh√¥ng th·ªÉ n·ªëi th√¨ 
    break nh√°nh ƒë·∫•y v√† quay lui root m·ªõi'''

    def b_fc_solver(self, grid, colors):
        if self.ui.stop_requested:
            return False, None

        self.ui.log("üöÄ B·∫Øt ƒë·∫ßu BFS + Forward Checking (ƒëa root)...")


        def forward_check(grid_local, remaining_colors):
            for color in remaining_colors:
                s, e = self.ui.pairs[color]
                if not self.path_exists(grid_local, s, e, color):
                    return False
            return True

        def backtrack(idx, grid_local, solved_paths, order):
            if idx == len(order):
                # ch·ªâ v·∫Ω khi t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i ho√†n ch·ªânh
                for c, p in solved_paths.items():
                    self.ui.paint_path(p, c)
                self.ui.master.update()
                return True, grid_local

            color = order[idx]
            s, e = self.ui.pairs[color]
            self.ui.log(f"‚û°Ô∏è ƒêang n·ªëi m√†u {color}")

            path = self.bfs_find_path(grid_local, s, e, color)
            if not path:
                self.ui.log(f"‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho {color}")
                return False, None

            new_grid = [row[:] for row in grid_local]
            for (r, c) in path:
                new_grid[r][c] = color
            solved_paths[color] = path

            remaining = order[idx+1:]
            if not forward_check(new_grid, remaining):
                # th·ª≠ ho√°n ƒë·ªïi th·ª© t·ª± c√°c m√†u c√≤n l·∫°i
                for i in range(len(remaining)):
                    new_order = order[:idx+1] + [remaining[i]] + [c for j, c in enumerate(remaining) if j != i]
                    ok, sol = backtrack(idx+1, new_grid, solved_paths, new_order)
                    if ok:
                        return True, sol
                return False, None

            ok, sol = backtrack(idx+1, new_grid, solved_paths, order)
            if ok:
                return True, sol

            del solved_paths[color]
            return False, None

        # --- th·ª≠ l·∫ßn l∆∞·ª£t m·ªói m√†u l√†m root ---
        for root in colors:
            order = [root] + [c for c in colors if c != root]
            self.ui.log(f"\nüéØ Th·ª≠ m√†u {root} l√†m root ƒë·∫ßu ti√™n...")
            solved_paths = {}
            ok, sol = backtrack(0, [row[:] for row in grid], solved_paths, order)
            if ok:
                self.ui.log(f"üèÜ T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i khi {root} l√†m root!")
                return True, sol
            else:
                self.ui.log(f"‚ùå Root {root} th·∫•t b·∫°i, th·ª≠ root kh√°c...")

        self.ui.log("‚õî Kh√¥ng c√≥ l·ªùi gi·∫£i v·ªõi b·∫•t k·ª≥ root n√†o.")
        return False, None




        


