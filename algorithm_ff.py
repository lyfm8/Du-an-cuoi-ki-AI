from collections import deque
from collections import defaultdict
import heapq
import random
import copy
import itertools
import time




'''
Uninformed: 1.BFS, 2.DFS, 3.UCS, 1.IDS

Informed: 2.Greedy, 3.A*

Local & Optimization: 1.Hill-Climbing, 2.Simulated Annealing, 3.Beam Search, GA

CSP: 1.Backtracking+Forward Checking, AC-3

Adversarial: 1.Minimax, 2.Alpha-Beta, 3.Expectiminimax (d·ªëi kh√°ng)

Planning: 2.And-Or search, 3.Belief search

extra: dls, ida*, 


'''

class algorithm:
    def __init__(self, ui):
        self.ui=ui

# Uninformed ----------------------------------------
    # ---------- DFS ----------
    def dfs_solver(self, grid, colors, idx):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        if idx == len(colors):
            return True, grid
        color = colors[idx]
        start, end = self.ui.pairs[color]
        self.ui.log(f"‚û°Ô∏è ƒêang x·ª≠ l√Ω m√†u {color.upper()} t·ª´ {start} ƒë·∫øn {end}")

        def backtrack(path, visited):
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return False, None


            r, c = path[-1]
            if (r, c) == end:
                new_grid = [row[:] for row in grid]
                for (pr, pc) in path:
                    new_grid[pr][pc] = color
                self.ui.log(f"‚úÖ T√¨m th·∫•y ƒë∆∞·ªùng cho m√†u {color}")
                ok, res = self.dfs_solver(new_grid, colors, idx+1)
                if ok:
                    # V·∫Ω ƒë∆∞·ªùng ho√†n ch·ªânh cho m√†u n√†y
                    self.ui.paint_path(path, colors[idx])
                    return True, res

                return False, None

            for dr, dc in [(0,1),(0,-1),(1,0),(-1,0)]:
                nr, nc = r+dr, c+dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if (nr, nc) not in visited and (grid[nr][nc] == '' or (nr, nc) == end):
                        visited.add((nr, nc))
                        path.append((nr, nc))
                        ok, res = backtrack(path, visited)
                        if ok: return True, res
                        path.pop()
                        visited.remove((nr, nc))

            return False, None

        return backtrack([start], {start})

    # ---------- BFS ----------
    # √ù t∆∞·ªüng: l·∫•y l·∫ßn l∆∞·ª£t t·ª´ng m√†u trong colors list l√†m root
    def bfs_solver(self, grid, colors):
        if self.ui.stop_requested:
            return False, None
        
        if not colors:
            return True, grid
        
        for root in colors:
            self.ui.log(f"‚û°Ô∏èTh·ª≠ root: {root}")
            order = [root] + [c for c in colors if c != root]
            new_grid = [row[:] for row in grid]
            solved = True
            self.ui.reset_game()
            for color in order:
                start, end  = self.ui.pairs[color]
                self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng BFS...")
                path = self.bfs_find_path(new_grid, start, end, color)
                if not path:
                    self.ui.log(f"‚ö†Ô∏è Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                    solved = False
                    continue
                
                for (r, c) in path:
                    new_grid[r][c] = color

                # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
                self.ui.paint_path(path, color)
                self.ui.master.update()
                
            if solved:
                self.ui.log(f"üèÜ T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i khi {root} l√†m root!")
                return True, new_grid
            
        self.ui.log("‚õî Kh√¥ng c√≥ l·ªùi gi·∫£i v·ªõi b·∫•t k·ª≥ root n√†o.")
        return False, None

        

    def bfs_find_path(self, grid, start, end, color):
        q = deque([start])
        visited = {start: None}
        while q:
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return False, None

            r, c = q.popleft()
            # highlight node ƒëang x√©t
            if (r, c) not in [start, end]:
                self.ui.paint_cell(r, c, "lightblue")
                self.ui.log(f"üîπ M·ªü r·ªông {color} t·∫°i ({r},{c})")


            if (r, c) == end:
                # reconstruct path
                path = []
                cur = end
                while cur is not None:
                    path.append(cur)
                    cur = visited[cur]
                path.reverse()
                return path

            # duy·ªát 4 h∆∞·ªõng
            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if (nr, nc) not in visited:
                        if grid[nr][nc] == "" or (nr, nc) == end:
                            visited[(nr, nc)] = (r, c)
                            q.append((nr, nc))
        return None
    
# Informed ----------------------------------------   
    #----------UCS----------
    def cost(self, value):
        # chi ph√≠ t·ª´ tr·∫°ng th√°i ban ƒë·∫ßu ƒë·∫øn tr·∫°ng th√°i hi·ªán t·∫°i
        # Chi ph√≠ m·ªói √¥ = 1
        ''' C√≥ th·ªÉ m·ªü r·ªông theo c√°ch
                Tr√°nh c√°c ƒë∆∞·ªùng r·∫Ω - ph·∫°t khi r·∫Ω
                Tr√°nh c√°c c√πng d·ªÖ tr√πng v·ªõi c√°c ƒë∆∞·ªùng kh√°c
                C√¢n b·∫±ng ƒë·ªô d√†i c√°c ƒë∆∞·ªùng
            '''
        return value + 1

    def ucs_solver(self, grid, colors):
        # T∆∞∆°ng t·ª± bfs solver nh∆∞ng thay ƒë·ªïi c√°ch s·∫Øp x·∫øp c√°c m√†u
        if self.ui.stop_requested:
            return False, None
        
        if not colors:
            return True, grid
        
        # S·∫Øp x·∫øp m√†u theo heuristic
        def manhattan(color):
            start, end = self.ui.pairs[color]
            return abs(start[0] - end[0]) + abs(start[1] - end[1])
    
        # Th·ª≠ nhi·ªÅu chi·∫øn l∆∞·ª£c s·∫Øp x·∫øp
        strategies = [
            sorted(colors, key=manhattan, reverse=True),   # Xa nh·∫•t tr∆∞·ªõc
            sorted(colors, key=manhattan),                 # G·∫ßn nh·∫•t tr∆∞·ªõc
            colors,                                                 # Th·ª© t·ª± g·ªëc
            list(reversed(colors))                                  # ƒê·∫£o ng∆∞·ª£c
        ]

        for order in strategies:
            self.ui.log(f"Th·ª≠ th·ª© t·ª±: {order}")
            new_grid = [row[:] for row in grid]
            solved = True
            self.ui.reset_game()

            for color in order:
                start, end  = self.ui.pairs[color]
                self.ui.log(f"T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng UCS...")
                path = self.ucs_find_path(new_grid, start, end, color)

                if not path:
                    self.ui.log(f"Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                    solved = False
                    continue
                
                for (r, c) in path:
                    new_grid[r][c] = color

                # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
                self.ui.paint_path(path, color)
                self.ui.master.update()
                
            if solved:
                self.ui.log(f"T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i v·ªõi th·ª© t·ª±: {order}")
                return True, new_grid
            
        self.ui.log("Kh√¥ng c√≥ l·ªùi gi·∫£i v·ªõi b·∫•t k·ª≥ root n√†o.")
        return False, None
    
    def ucs_find_path(self, grid, start, end, color):
        # Priority queue: (cost, node)
        pq = [(0, start)]
        visited = {start: (None, 0)}  # {node: (parent, cost)}
    
        while pq:
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return None
        
            cost, (r, c) = heapq.heappop(pq)
        
            # B·ªè qua n·∫øu ƒë√£ c√≥ ƒë∆∞·ªùng r·∫ª h∆°n ƒë·∫øn node n√†y
            if cost > visited[(r, c)][1]:
                continue
        
            # highlight node ƒëang x√©t
            if (r, c) not in [start, end]:
                self.ui.paint_cell(r, c, "lightblue")
                self.ui.log(f"üîπ M·ªü r·ªông {color} t·∫°i ({r},{c}) v·ªõi cost={cost}")
        
            if (r, c) == end:
                # reconstruct path
                path = []
                cur = end
                while cur is not None:
                    path.append(cur)
                    cur = visited[cur][0]
                path.reverse()
                return path
        
            # duy·ªát 4 h∆∞·ªõng
            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if grid[nr][nc] == "" or (nr, nc) == end:
                        new_cost = self.cost(cost)  # t√≠nh cost
                    
                        # Ch·ªâ th√™m v√†o queue n·∫øu ch∆∞a thƒÉm ho·∫∑c t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng r·∫ª h∆°n
                        if (nr, nc) not in visited or new_cost < visited[(nr, nc)][1]:
                            visited[(nr, nc)] = ((r, c), new_cost)
                            heapq.heappush(pq, (new_cost, (nr, nc)))
    
        return None
    
    #----------GREEDY----------
    def heuristic_greedy(self, grid, color, alpha):
        (sx, sy), (ex, ey) = self.ui.pairs[color]
        # yeu to 1_manhattan: |x1-x2| + |y1-y2|
        h1 = abs(sx - ex) + abs(sy - ey)

        # yeu to 2: tinh cac diem mau khac lien ke mau dang xet
        h2 = 0
        for (r, c) in [(sx, sy), (ex, ey)]:
            for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    cell = grid[nr][nc]
                    if cell != "" and cell != color:
                        h2 += 1

        return h1 + alpha * h2

    
    def greedy_solver(self, grid, colors, alpha):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        if not colors:
            return True, grid
        
        hq = []

        for color in colors:
            cost = self.heuristic_greedy(grid, color, alpha)
            heapq.heappush(hq, (cost, color))

        new_grid = [row[:] for row in grid]
        solved_colors = []

        while hq:
            cost, color = heapq.heappop(hq)
            start, end = self.ui.pairs[color]
            self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} (h={cost})")

            path = self.bfs_find_path(new_grid, start, end, color)
            if not path:
                self.ui.log(f"‚ö†Ô∏èKh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                continue

            # t√¥ m√†u v√† c·∫≠p nh·∫≠t grid
            for (r, c) in path:
                new_grid[r][c] = color
            self.ui.paint_path(path, color)
            solved_colors.append(color)

        return True, new_grid
    
    #----------A*----------
    def aStar_solver(self, grid, colors):
        # T∆∞∆°ng t·ª± ucs solver
        if self.ui.stop_requested:
            return False, None
        
        if not colors:
            return True, grid
        
        # S·∫Øp x·∫øp m√†u theo heuristic
        def manhattan(color):
            start, end = self.ui.pairs[color]
            return abs(start[0] - end[0]) + abs(start[1] - end[1])
    
        # Th·ª≠ nhi·ªÅu chi·∫øn l∆∞·ª£c s·∫Øp x·∫øp
        strategies = [
            sorted(colors, key=manhattan, reverse=True),   # Xa nh·∫•t tr∆∞·ªõc
            sorted(colors, key=manhattan),                 # G·∫ßn nh·∫•t tr∆∞·ªõc
            colors,                                                 # Th·ª© t·ª± g·ªëc
            list(reversed(colors))                                  # ƒê·∫£o ng∆∞·ª£c
        ]

        for order in strategies:
            self.ui.log(f"Th·ª≠ th·ª© t·ª±: {order}")
            new_grid = [row[:] for row in grid]
            solved = True
            self.ui.reset_game()

            for color in order:
                start, end  = self.ui.pairs[color]
                self.ui.log(f"T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng A*...")
                path = self.aStar_find_path(new_grid, start, end, color)

                if not path:
                    self.ui.log(f"Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                    solved = False
                    break
                
                for (r, c) in path:
                    new_grid[r][c] = color

                # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
                self.ui.paint_path(path, color)
                self.ui.master.update()
                
            if solved:
                self.ui.log(f"T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i v·ªõi th·ª© t·ª±: {order}")
                return True, new_grid
            
        self.ui.log("Kh√¥ng c√≥ l·ªùi gi·∫£i v·ªõi b·∫•t k·ª≥ m√†u n√†o.")
        return False, None
    
    def aStar_find_path(self, grid, start, end, color):
        def heuristic(pos):
            (r, c) = pos
            (ex, ey) = end
            # yeu to 1_manhattan: |x1-x2| + |y1-y2|
            h1 = abs(r - ex) + abs(c - ey)

            # yeu to 2: tinh cac diem mau khac lien ke mau dang xet
            h2 = 0
            for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    cell = grid[nr][nc]
                    if cell != "" and cell != color:
                        h2 += 1
            return h1 + h2
    
        # Priority queue: (f_cost, g_cost, h_cost, node)
        # f_cost = g_cost + h_cost
        g_cost = 0
        h_cost = heuristic(start)
        f_cost = g_cost + h_cost
        pq = [(f_cost, g_cost, h_cost, start)]
    
        # visited: {node: (parent, f_cost, g_cost, h_cost)}
        visited = {start: (None, f_cost, g_cost, h_cost)}
    
        while pq:
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return None
        
            f_cost, g_cost, h_cost, (r, c) = heapq.heappop(pq)
        
            # B·ªè qua n·∫øu ƒë√£ c√≥ ƒë∆∞·ªùng r·∫ª h∆°n ƒë·∫øn node n√†y
            if f_cost > visited[(r, c)][1]:
                continue
        
            # highlight node ƒëang x√©t
            if (r, c) not in [start, end]:
                self.ui.paint_cell(r, c, "lightblue")
                self.ui.log(f"M·ªü r·ªông {color} t·∫°i ({r},{c}) | g={g_cost}, h={h_cost}, f={f_cost}")
        
            # Ki·ªÉm tra ƒë√≠ch
            if (r, c) == end:
                # reconstruct path
                path = []
                cur = end
                while cur is not None:
                    path.append(cur)
                    cur = visited[cur][0]
                path.reverse()
                self.ui.log(f"T√¨m th·∫•y ƒë∆∞·ªùng cho {color} v·ªõi t·ªïng cost = {g_cost}")
                return path
        
            # duy·ªát 4 h∆∞·ªõng
            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if grid[nr][nc] == "" or (nr, nc) == end:
                        new_g_cost = self.cost(g_cost)
                        new_h_cost = heuristic((nr, nc))
                        new_f_cost = new_g_cost + new_h_cost
                    
                        # Ch·ªâ th√™m v√†o queue n·∫øu ch∆∞a thƒÉm ho·∫∑c t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng r·∫ª h∆°n
                        if (nr, nc) not in visited or new_f_cost < visited[(nr, nc)][1]:
                            visited[(nr, nc)] = ((r, c), new_f_cost, new_g_cost, new_h_cost)
                            heapq.heappush(pq, (new_f_cost, new_g_cost, new_h_cost, (nr, nc)))
    
        return None
    
    #----------Hill-Climbing------------
    '''√ù t∆∞·ªüng: ch·∫°y thu·∫≠t to√°n bfs nh∆∞ng kh√¥ng backtracking theo th·ª© t·ª± trong colors list ƒë·ªÉ 
    sinh ra tr∆∞·ªùng h·ª£p x·∫•u sau ƒë√≥ d√πng hill_climbing ƒë·ªÉ t√¨m l·ªùi gi·∫£i cu·ªëi c√πng'''
    def heuristic_hc(self, grid):
        #y tuong: so cap mau chua duoc noi
        cnt = 0
        for color, (start, end) in self.ui.pairs.items():
            if self.path_exists(grid, start, end, color) == False:
                cnt += 1
        return cnt
    
    def path_exists(self, grid, start, end, color):
        q = deque([start])
        visited = {start}

        while q:
            r, c = q.popleft()
            if (r, c) == end:
                return True

            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                    if (nr, nc) not in visited:
                        cell = grid[nr][nc]
                        #  ch·ªâ ƒëi qua √¥ c√πng m√†u ho·∫∑c √¥ end
                        if cell == "" or cell == color or (nr, nc) == end:
                            visited.add((nr, nc))
                            q.append((nr, nc))
        return False
    
    #d√πng th·∫≥ng bfs_find_path s·∫Ω ghi nhi·ªÅu log th·ª´a,  2 h√†m t∆∞∆°ng t·ª± nhau
    '''def path_exists(self, grid, start, end, color): #cong dung: kiem tra xem cap mau da duoc noi chua 
        path = self.bfs_find_path(grid, start, end, color) 
        return bool(path)'''

    #----------Beam Search------------
    def beamSearch(self, grid, colors, k):
        if self.ui.stop_requested:
            return False, None
        
        if not colors:
            return True, grid
        
        # S·∫Øp x·∫øp m√†u theo heuristic
        def manhattan(color):
            start, end = self.ui.pairs[color]
            return abs(start[0] - end[0]) + abs(start[1] - end[1])
    
        # Th·ª≠ nhi·ªÅu chi·∫øn l∆∞·ª£c s·∫Øp x·∫øp
        strategies = [
            sorted(colors, key=manhattan, reverse=True),   # Xa nh·∫•t tr∆∞·ªõc
            sorted(colors, key=manhattan),                 # G·∫ßn nh·∫•t tr∆∞·ªõc
            colors,                                                 # Th·ª© t·ª± g·ªëc
            list(reversed(colors))                                  # ƒê·∫£o ng∆∞·ª£c
        ]

        for order in strategies:
            self.ui.log(f"Th·ª≠ th·ª© t·ª±: {order}")
            new_grid = [row[:] for row in grid]
            solved = True
            self.ui.reset_game()

            for color in order:
                start, end  = self.ui.pairs[color]
                self.ui.log(f"T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng A*...")
                path = self.beamSearch_find_path(new_grid, start, end, color, k)

                if not path:
                    self.ui.log(f"Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                    solved = False
                    break
                
                for (r, c) in path:
                    new_grid[r][c] = color

                # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
                self.ui.paint_path(path, color)
                self.ui.master.update()
                
            if solved:
                self.ui.log(f"T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i v·ªõi th·ª© t·ª±: {order}")
                return True, new_grid
            
        self.ui.log("Kh√¥ng c√≥ l·ªùi gi·∫£i v·ªõi b·∫•t k·ª≥ m√†u n√†o.")
        return False, None
    
    def beamSearch_find_path(self, grid, start, end, color, k):
        # 
        current_q = deque([start])
        visited = {start: None}  # {node: parent}
        layer = 0
        while current_q:
            next_q = []
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return None

            layer += 1
            self.ui.log(f"-----Layer {layer}-----")
            for (r, c) in current_q:

                # highlight node ƒëang x√©t
                if (r, c) not in [start, end]:
                    self.ui.paint_cell(r, c, "lightblue")
                    self.ui.log(f"M·ªü r·ªông {color} t·∫°i ({r},{c})")
        
                if (r, c) == end:
                    # reconstruct path
                    path = []
                    cur = end
                    while cur is not None:
                        path.append(cur)
                        cur = visited[cur]
                    path.reverse()
                    return path
        
                # duy·ªát 4 h∆∞·ªõng
                for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                        if (nr, nc) not in visited:
                            if grid[nr][nc] == "" or (nr, nc) == end:
                                visited[(nr, nc)] = (r, c)
                                next_q.append((nr, nc))

            # Ch·ªçn k node t·ªët nh·∫•t 
            if next_q:
                def manhattan(pos):
                    (r, c) = pos
                    (ex, ey) = end
                    return abs(r - ex) + abs(c - ey)
                top_k = heapq.nsmallest(k, next_q, key=lambda x: manhattan(x))
                current_q = deque(top_k)
                self.ui.log(f"Gi·ªØ {k}/{len(next_q)} node t·ªët nh·∫•t")
            else:
                # Kh√¥ng t√¨m th·∫•y node ti·∫øp theo
                self.ui.log(f"Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng ƒëi cho m√†u {color}")
                return None

        return None

    def generate_neighbor(self, grid):
        new_grid = copy.deepcopy(grid)
        paths = {}

        connected = []
        unconnected = []

        for color, (start, end) in self.ui.pairs.items():
            if self.path_exists(grid, start, end, color):
                connected.append(color)
            else:
                unconnected.append(color)

        self.ui.log(f"üß© Connected: {connected}, Unconnected: {unconnected}")

        if not unconnected:
            self.ui.log("üéØ T·∫•t c·∫£ m√†u ƒë√£ n·ªëi xong, kh√¥ng t·∫°o neighbor m·ªõi.")
            return new_grid

        if not connected:
            color_remove = None
            self.ui.log("‚ö†Ô∏è Ch∆∞a c√≥ m√†u n√†o n·ªëi xong ƒë·ªÉ xo√°.")
        else:
            color_remove = random.choice(connected)

        self.ui.log(f"üîÑ ƒêang th·ª≠ xo√° m√†u: {color_remove}")

        # xo√° m√†u ƒë√£ n·ªëi (gi·ªØ l·∫°i 2 ƒë·∫ßu)
        if color_remove:
            self.ui.log(f"üí• ƒêang th·ª≠ xo√° m√†u: {color_remove}")
            start_rm, end_rm = self.ui.pairs[color_remove]
            old_path = self.bfs_find_path(grid, start_rm, end_rm, color_remove)
            if old_path:
                paths[color_remove] = old_path  # l∆∞u path tr∆∞·ªõc khi xo√°
            
            for r in range(self.ui.grid_size):
                for c in range(self.ui.grid_size):
                    if new_grid[r][c] == color_remove and (r, c) not in [start_rm, end_rm]:
                        new_grid[r][c] = ""

        # th·ª≠ n·ªëi l·∫°i t·∫•t c·∫£ m√†u ch∆∞a n·ªëi
        self.ui.log("üîÅ ƒêang th·ª≠ n·ªëi l·∫°i to√†n b·ªô m√†u ch∆∞a n·ªëi...")
        for color in unconnected:
            start, end = self.ui.pairs[color]
            path = self.bfs_find_path(new_grid, start, end, color)
            if path:
                paths[color] = path  # üîπ l∆∞u path n·ªëi m·ªõi
                self.ui.log(f"‚úÖ N·ªëi l·∫°i th√†nh c√¥ng {color} trong UNCONNECTED")
                for (r, c) in path:
                    new_grid[r][c] = color
            else:
                self.ui.log(f"‚ùå Kh√¥ng n·ªëi ƒë∆∞·ª£c {color}")

        # th·ª≠ n·ªëi l·∫°i m√†u ƒë√£ x√≥a (n·∫øu c√≥)
        if color_remove:
            start_r, end_r = self.ui.pairs[color_remove]
            path_r = self.bfs_find_path(new_grid, start_r, end_r, color_remove)
            if path_r:
                paths[color_remove] = path_r  # üîπ ghi ƒë√® path m·ªõi n·∫øu n·ªëi l·∫°i ƒë∆∞·ª£c
                self.ui.log(f"üîÅ N·ªëi l·∫°i th√†nh c√¥ng {color_remove} trong CONNECTED")
                for (r, c) in path_r:
                    new_grid[r][c] = color_remove

        return new_grid, paths

    

    def hc_solver(self, grid, colors, max_steps):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None
        
        current = copy.deepcopy(grid)
        for color in colors:
            start, end = self.ui.pairs[color]
            path = self.bfs_find_path(current, start, end, color)
            if path:
                self.ui.paint_path(path, color)
                for (r, c) in path:
                    current[r][c] = color
        best_score = self.heuristic_hc(current)
        best_paths = {}
        steps = 0

        self.ui.log(f"üöÄ B·∫Øt ƒë·∫ßu Hill-Climbing v·ªõi heuristic ban ƒë·∫ßu = {best_score}")

        

        while steps < max_steps and best_score > 0:
            neighbor, neighbor_paths = self.generate_neighbor(current)
            score = self.heuristic_hc(neighbor)

            self.ui.log(f"üîÅ Step {steps}: neighbor_heuristic = {score}")

            if score < best_score:
                self.ui.log(f"‚úÖ T√¨m th·∫•y tr·∫°ng th√°i t·ªët h∆°n ({best_score} ‚Üí {score})")
                current = neighbor
                best_score = score
                best_paths = neighbor_paths

                grid = copy.deepcopy(current)
                
                # v·∫Ω tr·ª±c ti·∫øp path t·ªët nh·∫•t ƒë√£ l∆∞u trong best_paths
                for color, path in best_paths.items():
                    self.ui.paint_path(path, color)



            steps += 1

        

        if best_score == 0:
            self.ui.log("üéâ T·∫•t c·∫£ m√†u ƒë√£ ƒë∆∞·ª£c n·ªëi th√†nh c√¥ng!")
            return True, current
        else:
            self.ui.log(f"‚õî D·ª´ng sau {steps} b∆∞·ªõc, ch∆∞a gi·∫£i ƒë∆∞·ª£c (heuristic={best_score})")
        
        return False, current
    
    #-----------Backtracking---------------
    '''√Ω t∆∞·ªüng: duy·ªát tu·∫ßn t·ª± theo colors list, th·ª≠ n·ªëi t·ª´ng m√†u,
    n·∫øu th·∫•t b·∫°i th√¨ quay lui v√† th·ª≠ root kh√°c'''

    def backtracking_solver(self, grid, colors):
        # Ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        if not colors:
            return True, grid

        for i, color in enumerate(colors):
            start, end = self.ui.pairs[color]
            self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng BFS...")
            path = self.bfs_find_path(grid, start, end, color)
            if not path:
                self.ui.log(f"‚ö†Ô∏è Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                continue

            new_grid = [row[:] for row in grid]
            for (r, c) in path:
                new_grid[r][c] = color

            # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
            self.ui.paint_path(path, color)

            remaining = colors[:i] + colors[i+1:]
            ok, solution = self.backtracking_solver(new_grid, remaining)
            if ok:
                return True, solution
            
            self.ui.log(f"‚Ü©Ô∏è Backtrack: h·ªßy ƒë∆∞·ªùng {color}")
        return False, None

    
    #-----------Backtracking + Forward Checking---------------
    '''√Ω t∆∞·ªüng: b·∫Øt ƒë·∫ßu theo th·ª© t·ª± trong colors list n·∫øu FC t√¨m ra 1 m√†u kh√¥ng th·ªÉ n·ªëi th√¨ 
    break nh√°nh ƒë·∫•y v√† quay lui root m·ªõi'''
    
    
    def forward_check(self, grid, remaining_colors):
        for color in remaining_colors:
            s, e = self.ui.pairs[color]
            # n·∫øu kh√¥ng c√≤n ƒë∆∞·ªùng n·ªëi kh·∫£ thi cho m√†u n√†y th√¨ fail s·ªõm
            if not self.path_exists(grid, s, e, color):
                self.ui.log(f"üö´ FC: m√†u {color} kh√¥ng c√≤n ƒë∆∞·ªùng n·ªëi kh·∫£ thi.")
                return False
        return True
    

    def b_fc_solver(self, grid, colors):
            # ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        # n·∫øu kh√¥ng c√≤n m√†u n√†o => ƒë√£ gi·∫£i xong
        if not colors:
            return True, grid

        for i, color in enumerate(colors):
            start, end = self.ui.pairs[color]
            self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng BFS...")
            path = self.bfs_find_path(grid, start, end, color)
            if not path:
                self.ui.log(f"‚ö†Ô∏è Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                continue

            new_grid = [row[:] for row in grid]
            for (r, c) in path:
                new_grid[r][c] = color

            # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
            self.ui.paint_path(path, color)

            # üîπ forward checking: ki·ªÉm tra xem c√°c c·∫∑p c√≤n l·∫°i c√≥ c√≤n kh·∫£ nƒÉng n·ªëi kh√¥ng
            remaining = colors[:i] + colors[i+1:]
            # h√†m forward checking: ki·ªÉm tra xem c√°c c·∫∑p c√≤n l·∫°i c√≥ c√≤n kh·∫£ nƒÉng n·ªëi kh√¥ng
            
            if not self.forward_check(new_grid, remaining):
                self.ui.log(f"‚ùå FC ph√°t hi·ªán b·∫ø t·∫Øc sau khi n·ªëi {color}, backtrack s·ªõm.")
                for c in colors:
                    if c == color:
                        break
                    s2, e2 = self.ui.pairs[c]
                    p2 = self.bfs_find_path(grid, s2, e2, c)
                    if p2:
                        self.ui.paint_path(p2, c)
                continue  # th·ª≠ nh√°nh kh√°c

            # n·∫øu FC h·ª£p l·ªá th√¨ ti·∫øp t·ª•c ƒë·ªá quy cho ph·∫ßn c√≤n l·∫°i
            ok, solution = self.b_fc_solver(new_grid, remaining)
            if ok:
                return True, solution

            self.ui.log(f"‚Ü©Ô∏è Backtrack: h·ªßy ƒë∆∞·ªùng {color}")

        return False, None
        
    def csp_ac3_solver(self, grid, colors):
        # ki·ªÉm tra stop request
        if self.ui.stop_requested:
            return False, None

        # n·∫øu kh√¥ng c√≤n m√†u n√†o => ƒë√£ gi·∫£i xong
        if not colors:
            return True, grid

        # Khai b√°o bi·∫øn
        variables = []
        for i in range(self.ui.grid_size):
            for j in range(self.ui.grid_size):
                if grid[i][j] == "":
                    variables += [(i, j)]

        # Mi·ªÅn gi√° tr·ªã c·ªßa m·ªói bi·∫øn
        domains = {x: colors for x in variables}

        # Thu h·∫πp domains l·∫°i d·ª±a tr√™n kho·∫£ng c√°ch
        for var, cl in domains.items():
            r, c = var
            possibleColors = {}
            for color in cl:
                start, end = self.ui.pairs[color]
                d_to_start = abs(r - start[0]) + abs(c - start[1])              # k/c t·ªõi start
                d_to_end = abs(r - end[0]) + abs(c - end[1])                    # k/c t·ªõi end
                d_start_end = abs(start[0] - end[0]) + abs(start[1] - end[1])   # k/c start t·ªõi end
                # ƒë·ªô ∆∞u ti√™n: √¥ c√†ng g·∫ßn ƒë∆∞·ªùng n·ªëi 2 m√†u c√≥ ƒë·ªô ∆∞u ti√™n c√†ng cao
                score = (d_start_end + 8) - (d_to_start + d_to_end)
                possibleColors[color] = score

            domains[var] = sorted(cl, key=lambda x: possibleColors[x], reverse=True)

        def is_neighbor(var1, var2):
            # Ki·ªÉm tra 2 √¥ c√≥ k·ªÅ nhau kh√¥ng
            r1, c1 = var1
            r2, c2 = var2
            return abs(r1 - r2) + abs(c1 - c2) == 1

        def constraint(var_i, val_i, var_j, val_j):
            """
            Constraint gi·ªØa 2 bi·∫øn k·ªÅ nhau

            Quy t·∫Øc:
            - N·∫øu 2 √¥ c√πng m√†u ‚Üí OK (t·∫°o th√†nh path)
            - N·∫øu 2 √¥ kh√°c m√†u ‚Üí OK (c√°c path song song)
            - Lu√¥n return True (constraint ƒë∆°n gi·∫£n nh·∫•t)

            Constraint ph·ª©c t·∫°p h∆°n s·∫Ω ki·ªÉm tra path continuity
            """
            # Constraint c∆° b·∫£n: Lu√¥n th·ªèa m√£n
            # (AC-3 s·∫Ω kh√¥ng lo·∫°i b·ªè g√¨ v·ªõi constraint n√†y)
            return True

        # T·∫°o c√°c cung (arc)
        arcs = []
        for var_i in variables:
            for var_j in variables:
                if var_i != var_j and is_neighbor(var_i, var_j):
                    arcs.append((var_i, var_j))

        def revise(xi, xj):
            # Lo·∫°i b·ªè gi√° tr·ªã t·ª´ domain[xi] n·∫øu kh√¥ng consistent v·ªõi domain[xj]
            removed = False
            valid_vals = []
            for vi in domains[xi]:
                if any(constraint(xi, vi, xj, vj) for vj in domains[xj]):
                    valid_vals.append(vi)
            if len(valid_vals) < len(domains[xi]):
                domains[xi] = valid_vals
                removed = True
            return removed

        def ac3():
            # Thu·∫≠t to√°n AC-3 c∆° b·∫£n
            # Kh·ªüi t·∫°o queue v·ªõi t·∫•t c·∫£ arcs
            queue = list(arcs)

            while queue:
                if self.ui.stop_requested:
                    return False

                # L·∫•y arc t·ª´ queue
                xi, xj = queue.pop(0)

                # Revise domain c·ªßa xi d·ª±a tr√™n xj
                if revise(xi, xj):
                    # N·∫øu domain[xi] r·ªóng ‚Üí Kh√¥ng c√≥ solution
                    if len(domains[xi]) == 0:
                        self.ui.log(f"AC-3: Domain c·ªßa {xi} r·ªóng!")
                        return False

                    # Th√™m l·∫°i c√°c arcs (xk, xi) v√†o queue
                    # (v·ªõi xk l√† neighbors c·ªßa xi, xk != xj)
                    for xk in variables:
                        if xk != xi and xk != xj and is_neighbor(xk, xi):
                            queue.append((xk, xi))

            return True

        self.ui.log("Ch·∫°y AC-3...")

        if not ac3():
            self.ui.log("AC-3 th·∫•t b·∫°i: Kh√¥ng c√≥ solution!")
            return False, None

        self.ui.log("AC-3 ho√†n th√†nh!")

        # Log k·∫øt qu·∫£ domains
        for var in variables:
            self.ui.log(f"  Domain[{var}] = {domains[var]}")

        
        # ======== Backtracking ƒë∆°n gi·∫£n ============
        
        assignment = {}
        color_paths = {color: [self.ui.pairs[color][0]] for color in colors}
        grid_copy = [row[:] for row in grid]

        # --- Forward checking (ki·ªÉm tra c√≤n ƒë∆∞·ªùng n·ªëi kh·∫£ thi) ---
        def path_exists(grid, start, end, color):
            q = deque([start])
            visited = {start}
            while q:
                r, c = q.popleft()
                if (r, c) == end:
                    return True
                for dr, dc in [(0,1),(0,-1),(1,0),(-1,0)]:
                    nr, nc = r+dr, c+dc
                    if 0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size:
                        if (nr, nc) not in visited:
                            cell = grid[nr][nc]
                            if cell == "" or cell == color or (nr, nc) == end:
                                visited.add((nr, nc))
                                q.append((nr, nc))
            return False

        # --- Ch·ªçn th·ª© t·ª± m√†u theo kho·∫£ng c√°ch (xa tr∆∞·ªõc) ---
        def manhattan(color):
            s, e = self.ui.pairs[color]
            return abs(s[0] - e[0]) + abs(s[1] - e[1])

        color_order = sorted(colors, key=manhattan, reverse=True)

        # --- H√†m backtrack ch√≠nh ---
        def backtrack(color_idx):
            if self.ui.stop_requested:
                return False

            # N·∫øu ƒë√£ ƒëi h·∫øt c√°c m√†u 
            if color_idx == len(color_order):
                return True

            color = color_order[color_idx]
            start, end = self.ui.pairs[color]
            path = color_paths[color]

            # N·∫øu ƒë√£ t·ªõi ƒë√≠ch ‚Üí sang m√†u ti·∫øp theo
            if path[-1] == end:
                # V·∫Ω ƒë∆∞·ªùng ƒëi 
                self.ui.paint_path(path, color)
                self.ui.master.update()
                time.sleep(self.ui.speed)
                return backtrack(color_idx + 1)

            r, c = path[-1]
            for dr, dc in [(0,1),(0,-1),(1,0),(-1,0)]:
                nr, nc = r + dr, c + dc
                if not (0 <= nr < self.ui.grid_size and 0 <= nc < self.ui.grid_size):
                    continue

                cell = grid_copy[nr][nc]
                if cell == "" or (nr, nc) == end:
                    # G√°n m√†u t·∫°m th·ªùi
                    grid_copy[nr][nc] = color
                    path.append((nr, nc))

                    # Forward checking: ki·ªÉm tra c√°c m√†u kh√°c c√≤n kh·∫£ thi kh√¥ng
                    valid = True
                    for other in colors:
                        if other != color:
                            s, e = self.ui.pairs[other]
                            if not path_exists(grid_copy, s, e, other):
                                valid = False
                                break

                    if valid and backtrack(color_idx):
                        return True

                    # Quay lui
                    grid_copy[nr][nc] = ""
                    path.pop()

            return False

        # --- B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ---
        self.ui.log("B·∫Øt ƒë·∫ßu Backtracking t√¨m ƒë∆∞·ªùng sau AC-3...")

        if backtrack(0):
            new_grid = [row[:] for row in grid_copy]
            for (r, c), val in assignment.items():
                new_grid[r][c] = val
            self.ui.log("CSP AC-3 + Backtracking t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i!")
            return True, new_grid
        else:
            self.ui.log("Backtracking th·∫•t b·∫°i sau AC-3!")
            return False, None
    
    def beliefSearch_bfs_solver(self, grid, colors):
        if self.ui.stop_requested:
            return False, None
        
        if not colors:
            return True, grid
        
        # S·∫Øp x·∫øp m√†u theo heuristic
        def manhattan(color):
            start, end = self.ui.pairs[color]
            return abs(start[0] - end[0]) + abs(start[1] - end[1])
    
        # Th·ª≠ nhi·ªÅu chi·∫øn l∆∞·ª£c s·∫Øp x·∫øp
        strategies = [
            sorted(colors, key=manhattan, reverse=True),   # Xa nh·∫•t tr∆∞·ªõc
            sorted(colors, key=manhattan),                 # G·∫ßn nh·∫•t tr∆∞·ªõc
            colors,                                                 # Th·ª© t·ª± g·ªëc
            list(reversed(colors))                                  # ƒê·∫£o ng∆∞·ª£c
        ]

        for order in strategies:
            self.ui.log(f"Th·ª≠ th·ª© t·ª±: {order}")
            new_grid = [row[:] for row in grid]
            solved = True
            self.ui.reset_game()

            for color in order:
                start, end  = self.ui.pairs[color]
                self.ui.log(f"‚û°Ô∏è T√¨m ƒë∆∞·ªùng cho m√†u {color} b·∫±ng BFS...")
                path = self.belief_bfs_find_path(new_grid, start, end, color)

                if not path:
                    self.ui.log(f"‚ö†Ô∏è Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng cho m√†u {color}")
                    solved = False
                    continue
                
                for (r, c) in path:
                    new_grid[r][c] = color

                # t√¥ lu√¥n ƒë∆∞·ªùng t√¨m ƒë∆∞·ª£c cho c·∫∑p n√†y
                self.ui.paint_path(path, color)
                self.ui.master.update()
                
            if solved:
                self.ui.log(f"T√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i v·ªõi th·ª© t·ª±: {order}")
                return True, new_grid
            
        self.ui.log("‚õî Kh√¥ng c√≥ l·ªùi gi·∫£i v·ªõi b·∫•t k·ª≥ root n√†o.")
        return False, None
    
    def belief_bfs_find_path(self, grid, start, end, color):
        # Kh·ªüi t·∫°o belief start g·ªìm start v√† c√°c √¥ l√¢n c·∫≠n
        # duy·ªát 4 h∆∞·ªõng
        belief_start = {(start)}
        r, c = start
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nr, nc = r + dr, c + dc
            if (0 <= nr < self.ui.grid_size and 
                0 <= nc < self.ui.grid_size and
                (grid[nr][nc] == "" or (nr, nc) == end)):
                belief_start.add((nr, nc))
                    
        belief_start = frozenset(belief_start)

        q = deque([(belief_start, [])])     # (belief, actions)
        visited = {belief_start}

        # L∆∞u parent ƒë·ªÉ reconstruct path
        parent = {belief_start: (None, None)}  # belief -> (parent_belief, action)
    
        # 4 h√†nh ƒë·ªông: l√™n, xu·ªëng, tr√°i, ph·∫£i
        actions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        action_names = ['UP', 'DOWN', 'LEFT', 'RIGHT']

        while q:
            # Ki·ªÉm tra stop request
            if self.ui.stop_requested:
                return False, None

            curBelief, action_seq = q.popleft()

            # Ki·ªÉm tra goal: T·∫§T C·∫¢ states trong belief ƒë·ªÅu l√† end
            if all(state == end for state in curBelief):
                # Reconstruct path t·ª´ action sequence
                path = self.reconstruct_path_from_actions(start, action_seq, grid, end)
                if path:
                    self.ui.log(f"‚úì T√¨m ƒë∆∞·ª£c path sau {len(action_seq)} actions: {path}")
                    return path

            # Sinh belief : th·ª≠ t·ª´ng action
            for action, action_name in zip(actions, action_names):
                dr, dc = action
                next_belief = set()
            
                # √Åp d·ª•ng action cho T·∫§T C·∫¢ states trong belief
                for state in curBelief:
                    r, c = state
                    nr, nc = r + dr, c + dc
                    
                    # Ki·ªÉm tra valid
                    if (0 <= nr < self.ui.grid_size and 
                        0 <= nc < self.ui.grid_size and
                        (grid[nr][nc] == "" or (nr, nc) == end)):
                        next_belief.add((nr, nc))
                    else:
                        # N·∫øu kh√¥ng ƒëi ƒë∆∞·ª£c, gi·ªØ nguy√™n v·ªã tr√≠
                        next_belief.add(state)
                next_belief = frozenset(next_belief)
            
                # Th√™m v√†o queue n·∫øu ch∆∞a thƒÉm
                if next_belief not in visited:
                    visited.add(next_belief)
                    q.append((next_belief, action_seq + [action]))
                    parent[next_belief] = (curBelief, action)
    
        return None
    
    def reconstruct_path_from_actions(self, start, actions, grid, end):
        """
        T·ª´ start v√† chu·ªói actions, t·∫°o l·∫°i path th·ª±c t·∫ø.
        Ch·ªçn m·ªôt state b·∫•t k·ª≥ t·ª´ belief cu·ªëi v√† trace ng∆∞·ª£c.
        """
        path = [start]
        r, c = start
        
        for dr, dc in actions:
            nr, nc = r + dr, c + dc
            
            # Ki·ªÉm tra c√≥ th·ªÉ ƒëi ƒë∆∞·ª£c kh√¥ng
            if (0 <= nr < self.ui.grid_size and 
                0 <= nc < self.ui.grid_size and
                (grid[nr][nc] == "" or (nr, nc) == end)):
                r, c = nr, nc
                path.append((r, c))
            # N·∫øu kh√¥ng ƒëi ƒë∆∞·ª£c, gi·ªØ nguy√™n (state kh√¥ng ƒë·ªïi)
        
        # Ki·ªÉm tra c√≥ ƒë·∫øn ƒë√≠ch kh√¥ng
        if path[-1] == end:
            return path
        
        return None
    
